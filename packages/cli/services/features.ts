import {
  ConfigFeatureDefs,
  generatedPackageName,
  readConfigFile,
  writeConfigFile,
} from "../utils/config.js";
import { FeatureDef, genDTS, genJs } from "../utils/gen.js";
import { outputFile } from "fs-extra";
import path from "path";

const packageJson = {
  name: generatedPackageName,
  version: "1.0.0",
  description: "Autogenerated package for typed features for Bucket",
  main: "index.js",
  types: "index.d.ts",
  exports: {
    ".": {
      import: "./index.js",
      types: "./index.d.ts",
    },
  },
};

export async function genFeatureTypes(
  configFeatures: ConfigFeatureDefs,
  basePath: string,
) {
  const features = configFeatures.map((feature) => ({
    key: typeof feature === "string" ? feature : feature.key,
    access: typeof feature === "string" ? true : (feature.access ?? true),
    config: typeof feature === "string" ? undefined : feature.config,
  }));

  await outputFile(
    path.join(basePath, generatedPackageName, `index.d.ts`),
    genDTS(features),
  );
  await outputFile(
    path.join(basePath, generatedPackageName, `index.js`),
    genJs(features),
  );
  await outputFile(
    path.join(basePath, generatedPackageName, `package.json`),
    JSON.stringify(packageJson, null, 2),
  );
}

export async function addFeatureToConfig(feature: FeatureDef) {
  const config = await readConfigFile();

  if (feature.access && feature.config === undefined)
    config.features.push(feature.key);
  else config.features.push(feature);

  await writeConfigFile(config);
}
