import { camelCase, kebabCase, pascalCase, snakeCase } from "change-case";

// Keep in sync with Bucket main repo
export const KeyFormats = [
  "custom",
  "pascalCase",
  "camelCase",
  "snakeCaseUpper",
  "snakeCaseLower",
  "kebabCaseUpper",
  "kebabCaseLower",
] as const;

export type KeyFormat = (typeof KeyFormats)[number];

type KeyFormatPattern = {
  transform: (key: string) => string;
  validate: (key: string) => true | string;
};

export const KeyFormatPatterns: Record<KeyFormat, KeyFormatPattern> = {
  custom: {
    transform: (key) => key?.trim(),
    validate: (key) =>
      /^[\p{L}\p{N}\p{P}\p{S}\p{Z}]+$/u.test(key) ||
      "Key must contain only letters, numbers, punctuation, symbols, or spaces",
  },
  pascalCase: {
    transform: (key) => pascalCase(key),
    validate: (key) =>
      /^[\p{Lu}][\p{L}\p{N}]*$/u.test(key) ||
      "Key must start with uppercase letter and contain only letters and numbers",
  },
  camelCase: {
    transform: (key) => camelCase(key),
    validate: (key) =>
      /^[\p{Ll}][\p{L}\p{N}]*$/u.test(key) ||
      "Key must start with lowercase letter and contain only letters and numbers",
  },
  snakeCaseUpper: {
    transform: (key) => snakeCase(key).toUpperCase(),
    validate: (key) =>
      /^[\p{Lu}][\p{Lu}\p{N}]*(?:_[\p{Lu}\p{N}]+)*$/u.test(key) ||
      "Key must be uppercase with words separated by underscores",
  },
  snakeCaseLower: {
    transform: (key) => snakeCase(key).toLowerCase(),
    validate: (key) =>
      /^[\p{Ll}][\p{Ll}\p{N}]*(?:_[\p{Ll}\p{N}]+)*$/u.test(key) ||
      "Key must be lowercase with words separated by underscores",
  },
  kebabCaseUpper: {
    transform: (key) => kebabCase(key).toUpperCase(),
    validate: (key) =>
      /^[\p{Lu}][\p{Lu}\p{N}]*(?:-[\p{Lu}\p{N}]+)*$/u.test(key) ||
      "Key must be uppercase with words separated by hyphens",
  },
  kebabCaseLower: {
    transform: (key) => kebabCase(key).toLowerCase(),
    validate: (key) =>
      /^[\p{Ll}][\p{Ll}\p{N}]*(?:-[\p{Ll}\p{N}]+)*$/u.test(key) ||
      "Key must be lowercase with words separated by hyphens",
  },
};

function nextAvailableKey(
  baseKey: string,
  format: KeyFormat,
  existingKeys: string[],
  attempt: number = 1,
): string {
  const separator = format.includes("snake") ? "_" : "-";
  const suggestedKey =
    attempt === 1 ? baseKey : `${baseKey}${separator}${attempt}`;

  return existingKeys.includes(suggestedKey)
    ? nextAvailableKey(baseKey, format, existingKeys, attempt + 1)
    : suggestedKey;
}

export function genFeatureKey(
  input: string,
  format: KeyFormat,
  existingKeys: string[],
): string {
  const key = KeyFormatPatterns[format].transform(input);
  return nextAvailableKey(key, format, existingKeys);
}

export const genDTS = (keys: string[]) => {
  return /* ts */ `
// DO NOT EDIT THIS FILE. IT IS GENERATED BY THE BUCKET CLI AND WILL BE OVERWRITTEN.
// eslint-disable
// prettier-ignore
declare module "@bucketco/react-sdk" {
  interface Features {
${keys.map((key) => `    "${key}": boolean;`).join("\n")}
  }
}
`.trim();
};
